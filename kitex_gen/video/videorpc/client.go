// Code generated by Kitex v0.5.1. DO NOT EDIT.

package videorpc

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	video "tiktok_micro/kitex_gen/video"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetPublishList(ctx context.Context, Req *video.PublishListReq, callOptions ...callopt.Option) (r *video.PublishListResp, err error)
	GetFeed(ctx context.Context, Req *video.FeedReq, callOptions ...callopt.Option) (r *video.FeedResp, err error)
	CommentAction(ctx context.Context, Req *video.CommentReq, callOptions ...callopt.Option) (r *video.CommentResp, err error)
	GetCommentList(ctx context.Context, Req *video.CommentListReq, callOptions ...callopt.Option) (r *video.CommentListResp, err error)
	FavoriteAction(ctx context.Context, Req *video.FavoriteReq, callOptions ...callopt.Option) (r *video.FavoriteResp, err error)
	GetFavoriteList(ctx context.Context, Req *video.FavoriteListReq, callOptions ...callopt.Option) (r *video.FavoriteListResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoRpcClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoRpcClient struct {
	*kClient
}

func (p *kVideoRpcClient) GetPublishList(ctx context.Context, Req *video.PublishListReq, callOptions ...callopt.Option) (r *video.PublishListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPublishList(ctx, Req)
}

func (p *kVideoRpcClient) GetFeed(ctx context.Context, Req *video.FeedReq, callOptions ...callopt.Option) (r *video.FeedResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFeed(ctx, Req)
}

func (p *kVideoRpcClient) CommentAction(ctx context.Context, Req *video.CommentReq, callOptions ...callopt.Option) (r *video.CommentResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentAction(ctx, Req)
}

func (p *kVideoRpcClient) GetCommentList(ctx context.Context, Req *video.CommentListReq, callOptions ...callopt.Option) (r *video.CommentListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCommentList(ctx, Req)
}

func (p *kVideoRpcClient) FavoriteAction(ctx context.Context, Req *video.FavoriteReq, callOptions ...callopt.Option) (r *video.FavoriteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteAction(ctx, Req)
}

func (p *kVideoRpcClient) GetFavoriteList(ctx context.Context, Req *video.FavoriteListReq, callOptions ...callopt.Option) (r *video.FavoriteListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteList(ctx, Req)
}
