// Code generated by Kitex v0.5.1. DO NOT EDIT.

package userrpc

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	relation "tiktok_micro/kitex_gen/relation"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FollowAction(ctx context.Context, Req *relation.FollowActionReq, callOptions ...callopt.Option) (r *relation.FollowActionResp, err error)
	FollowList(ctx context.Context, Req *relation.FollowListReq, callOptions ...callopt.Option) (r *relation.FollowListResp, err error)
	FollowerList(ctx context.Context, Req *relation.FollowerListReq, callOptions ...callopt.Option) (r *relation.FollowerListResp, err error)
	FriendList(ctx context.Context, Req *relation.FriendListReq, callOptions ...callopt.Option) (r *relation.FriendListResp, err error)
	MessageAction(ctx context.Context, Req *relation.MessageActionReq, callOptions ...callopt.Option) (r *relation.MessageActionResp, err error)
	MessageList(ctx context.Context, Req *relation.MessageListReq, callOptions ...callopt.Option) (r *relation.MessageListResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserRpcClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserRpcClient struct {
	*kClient
}

func (p *kUserRpcClient) FollowAction(ctx context.Context, Req *relation.FollowActionReq, callOptions ...callopt.Option) (r *relation.FollowActionResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowAction(ctx, Req)
}

func (p *kUserRpcClient) FollowList(ctx context.Context, Req *relation.FollowListReq, callOptions ...callopt.Option) (r *relation.FollowListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowList(ctx, Req)
}

func (p *kUserRpcClient) FollowerList(ctx context.Context, Req *relation.FollowerListReq, callOptions ...callopt.Option) (r *relation.FollowerListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowerList(ctx, Req)
}

func (p *kUserRpcClient) FriendList(ctx context.Context, Req *relation.FriendListReq, callOptions ...callopt.Option) (r *relation.FriendListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FriendList(ctx, Req)
}

func (p *kUserRpcClient) MessageAction(ctx context.Context, Req *relation.MessageActionReq, callOptions ...callopt.Option) (r *relation.MessageActionResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MessageAction(ctx, Req)
}

func (p *kUserRpcClient) MessageList(ctx context.Context, Req *relation.MessageListReq, callOptions ...callopt.Option) (r *relation.MessageListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MessageList(ctx, Req)
}
